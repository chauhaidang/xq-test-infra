const fs = require('fs-extra')

function extractContainerPort(ports) {
    if (!Array.isArray(ports) || ports.length === 0) return 80
    const first = String(ports[0])
    // formats: "host:container" or "container" or "host:container/proto"
    const parts = first.split(':')
    const candidate = parts.length > 1 ? parts[parts.length - 1] : parts[0]
    // strip possible /proto
    const portPart = String(candidate).split('/')[0]
    const num = parseInt(portPart, 10)
    return Number.isNaN(num) ? 80 : num
}

async function generateNginxConfig(servicesMap, outPath) {
    // servicesMap: { name: { ports: [...], ... } }
    const upstreams = []
    const locations = []
    for (const [name, svc] of Object.entries(servicesMap)) {
        // skip gateway if present
        if (name === 'xq-gateway') continue
        const port = extractContainerPort(svc.ports)
        upstreams.push(`upstream ${name}_upstream {\n    server ${name}:${port};\n}`)
        locations.push(`location /${name}/ {\n        proxy_pass http://${name}_upstream/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }`)
    }

    const conf = `# auto-generated by xq-test-infra gateway\nworker_processes 1;\nerror_log /var/log/nginx/error.log warn;\nevents { worker_connections 1024; }\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    ${upstreams.join('\n\n    ')}\n\n    server {\n        listen 80;\n        server_name _;\n\n        ${locations.join('\n\n        ')}\n    }\n}\n`

    await fs.outputFile(outPath, conf, 'utf8')
    return outPath
}

module.exports = {
    generateNginxConfig,
}

